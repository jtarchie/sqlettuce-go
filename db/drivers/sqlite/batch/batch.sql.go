// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: batch.sql

package batch

import (
	"context"
	"strings"
)

const delete = `-- name: Delete :many
DELETE FROM keys WHERE name IN (/*SLICE:names*/?) RETURNING value
`

func (q *Queries) Delete(ctx context.Context, names []string) ([]string, error) {
	query := delete
	var queryParams []interface{}
	if len(names) > 0 {
		for _, v := range names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var value string
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
