// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: writers.sql

package writers

import (
	"context"
	"database/sql"
)

const addFloat = `-- name: AddFloat :one
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = CAST(value AS REAL) + CAST(excluded.value AS REAL)
WHERE printf("%.17f", value) GLOB SUBSTRING(value, 1, 1) || '*'
RETURNING CAST(value AS REAL)
`

type AddFloatParams struct {
	Name  string
	Value string
}

func (q *Queries) AddFloat(ctx context.Context, arg AddFloatParams) (float64, error) {
	row := q.queryRow(ctx, q.addFloatStmt, addFloat, arg.Name, arg.Value)
	var value float64
	err := row.Scan(&value)
	return value, err
}

const addInt = `-- name: AddInt :one
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = CAST(value AS INTEGER) + CAST(excluded.value AS INTEGER)
WHERE printf("%d", value) = value
RETURNING CAST(value AS INTEGER)
`

type AddIntParams struct {
	Name  string
	Value string
}

func (q *Queries) AddInt(ctx context.Context, arg AddIntParams) (int64, error) {
	row := q.queryRow(ctx, q.addIntStmt, addInt, arg.Name, arg.Value)
	var value int64
	err := row.Scan(&value)
	return value, err
}

const append = `-- name: Append :one
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = value || excluded.value RETURNING length(value)
`

type AppendParams struct {
	Name  string
	Value string
}

func (q *Queries) Append(ctx context.Context, arg AppendParams) (sql.NullInt64, error) {
	row := q.queryRow(ctx, q.appendStmt, append, arg.Name, arg.Value)
	var length sql.NullInt64
	err := row.Scan(&length)
	return length, err
}

const delete = `-- name: Delete :one
DELETE FROM keys WHERE name = ?1 RETURNING value
`

func (q *Queries) Delete(ctx context.Context, name string) (string, error) {
	row := q.queryRow(ctx, q.deleteStmt, delete, name)
	var value string
	err := row.Scan(&value)
	return value, err
}

const flushAll = `-- name: FlushAll :exec
DELETE FROM keys
`

func (q *Queries) FlushAll(ctx context.Context) error {
	_, err := q.exec(ctx, q.flushAllStmt, flushAll)
	return err
}

const set = `-- name: Set :exec
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = excluded.value
`

type SetParams struct {
	Name  string
	Value string
}

func (q *Queries) Set(ctx context.Context, arg SetParams) error {
	_, err := q.exec(ctx, q.setStmt, set, arg.Name, arg.Value)
	return err
}
