// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: writers.sql

package writers

import (
	"context"
	"database/sql"
)

const addFloat = `-- name: AddFloat :one
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = CAST(value AS REAL) + CAST(excluded.value AS REAL)
WHERE printf("%.17f", value) GLOB SUBSTRING(value, 1, 1) || '*'
RETURNING CAST(value AS REAL)
`

type AddFloatParams struct {
	Name  string
	Value string
}

func (q *Queries) AddFloat(ctx context.Context, arg *AddFloatParams) (float64, error) {
	row := q.queryRow(ctx, q.addFloatStmt, addFloat, arg.Name, arg.Value)
	var value float64
	err := row.Scan(&value)
	return value, err
}

const addInt = `-- name: AddInt :one
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = CAST(value AS INTEGER) + CAST(excluded.value AS INTEGER)
WHERE printf("%d", value) = value
RETURNING CAST(value AS INTEGER)
`

type AddIntParams struct {
	Name  string
	Value string
}

func (q *Queries) AddInt(ctx context.Context, arg *AddIntParams) (int64, error) {
	row := q.queryRow(ctx, q.addIntStmt, addInt, arg.Name, arg.Value)
	var value int64
	err := row.Scan(&value)
	return value, err
}

const appendValue = `-- name: AppendValue :one
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = value || excluded.value
RETURNING length(value)
`

type AppendValueParams struct {
	Name  string
	Value string
}

func (q *Queries) AppendValue(ctx context.Context, arg *AppendValueParams) (sql.NullInt64, error) {
	row := q.queryRow(ctx, q.appendValueStmt, appendValue, arg.Name, arg.Value)
	var length sql.NullInt64
	err := row.Scan(&length)
	return length, err
}

const flushAll = `-- name: FlushAll :exec
DELETE FROM keys
`

func (q *Queries) FlushAll(ctx context.Context) error {
	_, err := q.exec(ctx, q.flushAllStmt, flushAll)
	return err
}

const listRightPush = `-- name: ListRightPush :one
INSERT INTO keys (name, value)
VALUES (?1, json_insert('[]', '$[#]', ?2)) ON CONFLICT(name) DO
UPDATE
SET value = json_insert(
    value,
    '$[#]',
    json_extract(excluded.value, '$[0]')
  )
RETURNING CAST(json_valid(value) AS boolean) AS valid,
  CAST(json_array_length(value) AS INTEGER) AS length
`

type ListRightPushParams struct {
	Name  string
	Value interface{}
}

type ListRightPushRow struct {
	Column1 bool
	Column2 int64
}

func (q *Queries) ListRightPush(ctx context.Context, arg *ListRightPushParams) (ListRightPushRow, error) {
	row := q.queryRow(ctx, q.listRightPushStmt, listRightPush, arg.Name, arg.Value)
	var i ListRightPushRow
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}

const listSet = `-- name: ListSet :one
UPDATE keys
SET value = json_replace(
    value,
    '$[' || IIF(?1 >= 0, ?1, '#' || ?1) || ']',
    ?2
  )
WHERE name = ?3
RETURNING json_valid(value)
`

type ListSetParams struct {
	Index interface{}
	Value interface{}
	Name  string
}

func (q *Queries) ListSet(ctx context.Context, arg *ListSetParams) (interface{}, error) {
	row := q.queryRow(ctx, q.listSetStmt, listSet, arg.Index, arg.Value, arg.Name)
	var json_valid interface{}
	err := row.Scan(&json_valid)
	return json_valid, err
}

const set = `-- name: Set :exec
INSERT INTO keys (name, value)
VALUES (?1, ?2) ON CONFLICT(name) DO
UPDATE
SET value = excluded.value
`

type SetParams struct {
	Name  string
	Value string
}

func (q *Queries) Set(ctx context.Context, arg *SetParams) error {
	_, err := q.exec(ctx, q.setStmt, set, arg.Name, arg.Value)
	return err
}
